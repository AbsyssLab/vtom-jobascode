# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths-ignore:
      - '.github/workflows/**'

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4
        
        with:
            fetch-depth: 0
            
      - name: Get changed files
        id: changed-files
        run: |
            # Returns the list of files changed in the last commit with the type of change (A: added, M: modified, D: deleted)
            echo "changed_files=$(git diff --name-status ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
      - name: List changed files
        run: |
            for file in "${{ steps.changed-files.outputs.changed_files }}"; do
                # split the file status and file name
                status=$(echo $file | cut -d ' ' -f1)
                file=$(echo $file | cut -d ' ' -f2)
                echo "$file was changed"

                # remove .json at end of file
                fileName=$(echo $file | sed 's/\.json//')

                # if file was added, create it in VTOM
                if [ "$status" == "A" ]; then
                    #remove the file name (last part after /) from $filename (example : dates/MyDate.json -> dates)
                    path=$(echo $fileName | sed 's/\/[^\/]*$//')

                    echo curl -X POST "https://${{ vars.VTOM_SERVER_NAME }}/vtom/public/domain/2.0/$path" -H "X-API-KEY:${{ secrets.VTOM_TOKEN }}" -H "accept: */*" -H "Content-Type: application/json" --data-binary "@$file"
                    curl -X POST "https://${{ vars.VTOM_SERVER_NAME }}/vtom/public/domain/2.0/$path" -H "X-API-KEY:${{ secrets.VTOM_TOKEN }}" -H "accept: */*" -H "Content-Type: application/json" --data-binary "@$file"
                    continue
                fi

                # if file was modified, update it in VTOM
                if [ "$status" == "M" ]; then
                    echo curl -X PUT "https://${{ vars.VTOM_SERVER_NAME }}/vtom/public/domain/2.0/$fileName" -H "X-API-KEY:${{ secrets.VTOM_TOKEN }}" -H "accept: */*" -H "Content-Type: application/json" --data-binary "@$file"
                    curl -X PUT "https://${{ vars.VTOM_SERVER_NAME }}/vtom/public/domain/2.0/$fileName" -H "X-API-KEY:${{ secrets.VTOM_TOKEN }}" -H "accept: */*" -H "Content-Type: application/json" --data-binary "@$file"
                    continue
                fi
            
                # if file was deleted, delete it from VTOM
                if [ "$status" == "D" ]; then
                    echo curl -X DELETE "https://${{ vars.VTOM_SERVER_NAME }}/vtom/public/domain/2.0/$fileName" -H "X-API-KEY:${{ secrets.VTOM_TOKEN }}"
                    curl -X DELETE "https://${{ vars.VTOM_SERVER_NAME }}/vtom/public/domain/2.0/$fileName" -H "X-API-KEY:${{ secrets.VTOM_TOKEN }}"
                    continue
                fi

            done
